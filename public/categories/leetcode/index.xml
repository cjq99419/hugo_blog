<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>leetcode - 分类 - nanko的快乐小窝</title>
        <link>https://example.com/categories/leetcode/</link>
        <description>leetcode - 分类 - nanko的快乐小窝</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>cjq99419@163.com (nanko)</managingEditor>
            <webMaster>cjq99419@163.com (nanko)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 01 Feb 2021 18:00:46 &#43;0800</lastBuildDate><atom:link href="https://example.com/categories/leetcode/" rel="self" type="application/rss+xml" /><item>
    <title>leetcode 2.两数相加</title>
    <link>https://example.com/leetcode-2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
    <pubDate>Mon, 01 Feb 2021 18:00:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/leetcode-2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
    <description><![CDATA[leetcode 2.两数相加 需要对两个逆序的非空数字进行求和，重点在于两个整数长度不固定。 由于是逆序存储，所以实际上链表第一位并不对其，比如32 + 234，]]></description>
</item><item>
    <title>Leetcode 1.两数之和</title>
    <link>https://example.com/leetcode-1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
    <pubDate>Wed, 06 Jan 2021 20:31:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/leetcode-1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
    <description><![CDATA[leetcode 1.两数之和 使用map存储已经遍历过的值，key为target - num，即后续需要配对的值，value为值下标。 1 2 3 4 5 6 7 8 9 10 11 12 func]]></description>
</item><item>
    <title>Leetcode 206.反转链表</title>
    <link>https://example.com/leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
    <pubDate>Mon, 05 Oct 2020 21:23:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
    <description><![CDATA[反转链表的n种实现（go） 一、双指针迭代法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func reverseList(head *ListNode) *ListNode { if head == nil { return nil } else { var tmp *ListNode cur := head.Next pre := head for cur != nil { tmp = cur.Next]]></description>
</item><item>
    <title>Leetcode 48.旋转图像</title>
    <link>https://example.com/leetcode-48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link>
    <pubDate>Sat, 03 Oct 2020 21:23:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://example.com/leetcode-48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid>
    <description><![CDATA[leetcode 48.旋转图像 重点要求原地旋转，即不可以使用额外矩阵来做中间存储再写回，因此直接循环赋值的做法放弃。 要求整体顺时针旋转90度，此时我们只考]]></description>
</item></channel>
</rss>
